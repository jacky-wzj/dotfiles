xnoremap p pgvy  "  粘贴时不置换“剪贴板”
set cursorline
set cursorcolumn
" set autochdir "Automatically change the current directory"
" ============================= encoding ==============================
set encoding=UTF-8
set langmenu=UTF-8
set guifont=JetBrainsMono\ Nerd\ Font:h12
" set guifont=Ubuntu:h32
set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936
set termencoding=utf-8 "只对终端影响(默认
set ffs=unix,dos,mac "use UNIX as the standard file type

" ========================== Color & syntax & Theme =================================
syntax on
filetype plugin indent on
set number
set relativenumber
set nowrap "不折行
set showcmd "在状态栏显示正在输入的命令
set laststatus=2 "总是显示状态栏
if has("termguicolors")
    set termguicolors
endif
" ==========================  Search & Replace =================================
set ignorecase "搜索的时候大小写不敏感
" set clipboard+=unnamedplus
set clipboard=unnamedplus,unnamed
" ========================== The width of Tap ======================================
set tabstop=4 "设置 tab 宽度为4
set shiftwidth=4  "按退格键时可以一次删除4个空格
set softtabstop=4 "设置自动对齐空格数
set expandtab " 编辑的时候将所有的 tab 设置为空格(expandtab)
set smartindent 
set smarttab
set cc=120
" ========================== key mapping ======================================
let mapleader = ","
map <leader>y "+y
map <leader>p "+p
map <silent><c-k> <C-w><Up>
map <silent><c-j> <C-w><Down>
map <silent><c-l> <C-w><Right>
map <silent><c-h> <C-w><Left>
nnoremap <silent><c-x> :bd<CR>
map <silent><leader>,j <C-w>10+        "屏幕下移
map <silent><leader>,k <C-w>10-        "屏幕上移
map <silent><leader>,h <C-w>30<
map <silent><leader>,l <C-w>30>
nnoremap <silent><leader>/n :nohl<CR>
" map <silent><leader>rr :NERDTree %:p:h<CR>    "刷新 NERDTree 到当前目录
nmap <silent><leader>u :UndotreeToggle<CR>
nmap <silent><leader>m :NERDTreeToggle<CR>
nmap <silent><leader>b :Buffers<CR>
nmap <silent><leader>N :bprevious<CR>
nmap <silent><leader>n :bnext<CR>
nmap <silent><leader>t :TagbarToggle<CR> 
nmap <silent><leader>/ :RgWord
nmap <silent><leader>// :Rg<CR>
nmap <silent><c-p> :Files<CR>
" ========================== VimPlug ======================================
call plug#begin('~/.vim/plugged')
" Plug 'lyokha/vim-xkbswitch'
Plug 'lilydjwg/fcitx.vim'
Plug 'bling/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'preservim/nerdtree' "用lf替换了 
Plug 'ryanoasis/vim-devicons' "增加符号标识,依赖 nerd-fonts
Plug 'preservim/tagbar' "依赖tags，需要单独安装,可以用coc 替代
Plug 'Yggdroot/indentLine' "缩进显示
Plug 'mbbill/undotree'
Plug 'justinmk/vim-sneak'
Plug 'haya14busa/incsearch.vim'
" Plug 'easymotion/vim-easymotion'
Plug 'psliwka/vim-smoothie'
Plug 'mhinz/vim-startify'
Plug 'farmergreg/vim-lastplace'
Plug 'xolox/vim-misc'
Plug 'xolox/vim-session' "依赖vim-misc
"Plug 'dyng/ctrlsf.vim' "依赖ack
" Plug 'mfussenegger/nvim-dap' "debug 
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim' 
Plug 'tpope/vim-fugitive' "依赖git
" Plug 'gregsexton/gitv'
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown' "不使用折叠，显示栅栏，关闭快捷键，只使用高亮
Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app && yarn install'  }
Plug 'flazz/vim-colorschemes'
Plug 'neoclide/coc.nvim', {'branch': 'release'} "依赖nodejs
Plug 'tomtom/tcomment_vim'
Plug 'voldikss/vim-translator'
" Plug 'pseewald/vim-anyfold'
Plug 'chrisbra/vim-diff-enhanced'
" Plug 'mg979/vim-visual-multi'
Plug 'uiiaoo/java-syntax.vim'
Plug 'tpope/vim-surround'
Plug 'MattesGroeger/vim-bookmarks'
" Plug 'neomake/neomake'
Plug 'luochen1990/rainbow'
Plug 'ptzz/lf.vim'
Plug 'voldikss/vim-floaterm'
Plug 'axiaoxin/vim-json-line-format'
" Plug 'leshill/vim-json'
" Plug 'dart-lang/dart-vim-plugin'
Plug 'puremourning/vimspector'
Plug 'gcmt/wildfire.vim'
" Plug 'fatih/vim-go'
Plug 'tpope/vim-dadbod'
Plug 'kristijanhusak/vim-dadbod-ui'
Plug 'itchyny/vim-cursorword'
Plug 'lfv89/vim-interestingwords'
" Plug 'nanotee/sqls.nvim'
" Plug 'lighttiger2505/sqls.vim'
" Plug 'kristijanhusak/vim-dadbod-completion'
" go install github.com/lighttiger2505/sqls@latest
call plug#end()
" ==================== Toggle Menu and Toolbar =====================
" set guioptions-=m " 隐藏菜单栏 
" set guioptions-=T " 隐藏工具栏 
" set guioptions-=L " 隐藏左侧滚动条 
" set guioptions-=r " 隐藏右侧滚动条 
" set guioptions-=b " 隐藏底部滚动条 
" set showtabline=0 " 隐藏Tab栏 
" =====================color scheme =============
" colorscheme molokai
colorscheme gruvbox
" colorscheme solarized
" =====================Customize ==============
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'unique_tail_improved'
let g:airline#extensions#tabline#left_alt_sep = ' '
let g:airline#extensions#tabline#buffer_idx_mode = 1
let g:airline#extensions#tabline#buffer_nr_show = 0
let g:tagbar_position = 'left'
let g:tex_conceal = ""
" autocmd vimenter * NERDTree  "NERDTree 启动时开启
" autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif "NERDTree 随最后一个窗口关闭
let NERDTreeWinPos="right" "NERDTree 在右侧显示
let NERDTreeShowHidden=1 " show hidden file
let NERDTreeDirArrows=1 "Show Node model
let NERDTreeShowLineNumbers=1 "Show line number
let NERDTreeHighlightCursorline=1
" let g:indentLine_setConceal = 0 "indentLine 会隐藏json文件的冒号,使用起来非常不便
let g:indentLine_fileTypeExclude = ['json'] "上面的配置会导致indentline功能丧失,先暂时过滤掉json文件吧
" hi Cursor          guifg=#FF0000 guibg=#F8F8F0 "高亮光标所在位置,避免搜索高亮的冲突
let g:rainbow_active = 1
"keep cursor in the middle all the time :)
nnoremap k kzz
nnoremap j jzz
nnoremap p pzz
nnoremap P Pzz
nnoremap G Gzz
nnoremap x xzz
inoremap <ESC> <ESC>zz
nnoremap <ENTER> <ENTER>zz
inoremap <ENTER> <ENTER><ESC>zzi
nnoremap o o<ESC>zza
nnoremap O O<ESC>zza
nnoremap a a<ESC>zza
" ====================== coc =====================
" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: There's always complete item selected by default, you may want to enable
" no select by `"suggest.noselect": true` in your configuration file.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice.
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>,f  <Plug>(coc-format-selected)
nmap <leader>,f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Run the Code Lens action on the current line.
nmap <leader>cl  <Plug>(coc-codelens-action)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" " Remap <C-f> and <C-b> for scroll float windows/popups.
" if has('nvim-0.4.0') || has('patch-8.2.0750')
"   nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
"   nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
"   inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
"   inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
"   vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
"   vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
" endif

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocActionAsync('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>
"
" airline show coc status
let g:airline#extensions#coc#enabled = 1
let g:coc_global_extensions = ['coc-json', 'coc-java', 'coc-markdownlint', 'coc-sql', 'coc-pairs','coc-xml','coc-tsserver','coc-sh','coc-java-debug','coc-jedi']
autocmd CursorHold * silent call CocActionAsync('highlight')
autocmd FileType * let b:coc_pairs_disabled = ['<']
"====================== fzf ====================
let g:fzf_action = {
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }

" using TMUX
if exists('$TMUX')
  let g:fzf_layout = { 'tmux': '-p90%,80%' }
else
  " - Popup window
  let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.9 } }
endif

" Customize fzf colors to match your color scheme
" - fzf#wrap translates this to a set of `--color` options
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

" Enable per-command history
" - History files will be stored in the specified directory
" - When set, CTRL-N and CTRL-P will be bound to 'next-history' and
"   'previous-history' instead of 'down' and 'up'.
let g:fzf_history_dir = '~/.local/share/fzf-history'

" Terminal colors for seoul256 color scheme
if has('nvim')
  let g:terminal_color_0 = '#4e4e4e'
  let g:terminal_color_1 = '#d68787'
  let g:terminal_color_2 = '#5f865f'
  let g:terminal_color_3 = '#d8af5f'
  let g:terminal_color_4 = '#85add4'
  let g:terminal_color_5 = '#d7afaf'
  let g:terminal_color_6 = '#87afaf'
  let g:terminal_color_7 = '#d0d0d0'
  let g:terminal_color_8 = '#626262'
  let g:terminal_color_9 = '#d75f87'
  let g:terminal_color_10 = '#87af87'
  let g:terminal_color_11 = '#ffd787'
  let g:terminal_color_12 = '#add4fb'
  let g:terminal_color_13 = '#ffafaf'
  let g:terminal_color_14 = '#87d7d7'
  let g:terminal_color_15 = '#e4e4e4'
else
  let g:terminal_ansi_colors = [
    \ '#4e4e4e', '#d68787', '#5f865f', '#d8af5f',
    \ '#85add4', '#d7afaf', '#87afaf', '#d0d0d0',
    \ '#626262', '#d75f87', '#87af87', '#ffd787',
    \ '#add4fb', '#ffafaf', '#87d7d7', '#e4e4e4'
  \ ]
endif
"Quick ripgrep word under cursor
command! -bang -nargs=0 RgWord
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always --smart-case '.shellescape(expand('<cword>')), 1,
  \   fzf#vim#with_preview(), <bang>0)

function! RipgrepFzf(query, fullscreen)
  let command_fmt = 'rg --column --line-number --no-heading --color=always --smart-case -- %s || true'
  let initial_command = printf(command_fmt, shellescape(a:query))
  let reload_command = printf(command_fmt, '{q}')
  let spec = {'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
  call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
endfunction
command! -nargs=* -bang Rg call RipgrepFzf(<q-args>, <bang>0)
"======================= TComments ======================
let g:tcomment_maps = 0 "注释掉自带的映射,原映射搞的太多太复杂了
nmap <leader>,c <Plug>TComment_<c-_><c-_>
vmap <leader>,c <Plug>TComment_<c-_><c-_>
nmap <leader>,b <Plug>TComment_<c-_>b
xmap <leader>,b <Plug>TComment_<c-_>b
"==================== vim-anyfold ==========================
" autocmd Filetype * AnyFoldActivate
" let g:anyfold_fold_comments=1
" set foldlevel=1
" " hi Folded term=NONE cterm=NONE
" let g:anyfold_motion=0 "关闭映射
" ====================== vim-diff-enhanced =======================
" started In Diff-Mode set diffexpr (plugin not loaded yet)
if &diff
    let &diffexpr='EnhancedDiff#Diff("git diff", "--diff-algorithm=patience")'
endif
" ====================== lf-vim =======================
let g:lf_width=0.9
let g:lf_height=0.9
" ====================== vim-markdown =======================
let g:vim_markdown_folding_disabled = 1 "行数较多的时候折叠会导致中文输入卡，因此需要关闭vim-markdown的折叠功能
let g:vim_markdown_no_default_key_mappings = 1 "关闭默认快捷键"
let g:vim_markdown_conceal = 0 "显示样式栅栏
let g:tex_conceal = ""
let g:vim_markdown_math = 1
let g:vim_markdown_conceal_code_blocks = 0
" ====================== perl & ruby =======================
let g:loaded_perl_provider = 0
let g:loaded_ruby_provider = 0
" ====================== insearch.vim =======================
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)
" ====================== vim-smooth =======================
let g:smoothie_no_default_mappings = 1
nnoremap <unique> <C-d> <cmd>call smoothie#do("\<C-D>") <CR>
vnoremap <unique> <C-d> <cmd>call smoothie#do("\<C-D>") <CR>
nnoremap <unique> <C-f> <cmd>call smoothie#do("\<C-F>") <CR>
vnoremap <unique> <C-f> <cmd>call smoothie#do("\<C-F>") <CR>
nnoremap <unique> <C-b> <cmd>call smoothie#do("\<C-B>") <CR>
vnoremap <unique> <C-b> <cmd>call smoothie#do("\<C-B>") <CR>
nnoremap <unique> <C-u> <cmd>call smoothie#do("\<C-U>") <CR>
vnoremap <unique> <C-u> <cmd>call smoothie#do("\<C-U>") <CR>
" ====================== dadbod-ui =======================
let g:dbs = {
      \  'xmkp'         : 'mysql://bi:LsU7a0CGvXlF@192.168.1.161:3307',
      \  'xmkp-grouth'         : 'mysql://bi:LsU7a0CGvXlF@192.168.1.161:3307/xmkp_growth',
      \  'xmkp_trade_payment'  : 'mysql://naliworld:password!@192.168.1.161:3307/xmkp_trade_payment',
      \  'QA'                  : 'mysql://naliworld:password!@192.168.1.161:3307',
      \  'xmkp-edu'            : 'mysql://naliworld:password!@192.168.1.161:3307/xmkp_edu',
      \  'xxm'            : 'mysql://naliworld:password!@192.168.1.161:3306',
      \  'xxm2' : 'mysql://naliworld:password!@192.168.3.161:3306',
      \ 'xxm3': 'mysql:///bi:LsU7a0CGvXlF@192.168.1.161:3307'
      \ }
" ====================== vim-translator =======================
let g:translator_target_lang='zh'
let g:translator_default_engines=['bing', 'haici'] " 'google 速度有点慢， 先摘除'
" let g:translator_proxy_url='socks5://127.0.0.1:7777'
nmap <silent> <Leader>,t <Plug>TranslateW
vmap <silent> <Leader>,t <Plug>TranslateWV
" ====================== vim-interestingwords =======================
nnoremap <silent> <leader>h :call InterestingWords('n')<cr>
vnoremap <silent> <leader>h :call InterestingWords('v')<cr>
nnoremap <silent> <leader>H :call UncolorAllWords()<cr>

nnoremap <silent> <leader>,n :call WordNavigation(1)<cr>
nnoremap <silent> <leader>,N :call WordNavigation(0)<cr>
" ====================== vim-undotree =======================
if has("persistent_undo")
   let target_path = expand('~/.undodir')

    " create the directory and any parent directories
    " if the location does not exist.
    if !isdirectory(target_path)
        call mkdir(target_path, "p", 0700)
    endif

    let &undodir=target_path
    set undofile
endif
" ====================== vim-startify =======================
let g:startify_session_dir = '~/.vim/sessions'
let g:startify_lists = [
      \ { 'type': 'sessions',  'header': ['   Sessions']       },
      \ { 'type': 'dir',       'header': ['   MRU '. getcwd()] },
      \ { 'type': 'files',     'header': ['   MRU']            },
      \ { 'type': 'bookmarks', 'header': ['   Bookmarks']      },
      \ { 'type': 'commands',  'header': ['   Commands']       },
      \ ]
" ====================== vim-sessions =======================
let g:session_autosave='no'
let g:session_autoload='no'
" let g:session_autosave_to='~/.vim/sessions'
map <silent><leader>se : SaveSession <cr>
set sessionoptions-=help
" ====================== vim-bookmarks =======================
let g:bookmark_no_default_key_mappings = 1
nmap <Leader>mm <Plug>BookmarkToggle
nmap <Leader>mi <Plug>BookmarkAnnotate
nmap <Leader>ma <Plug>BookmarkShowAll
nmap <Leader>mj <Plug>BookmarkNext
nmap <Leader>mk <Plug>BookmarkPrev
nmap <Leader>mc <Plug>BookmarkClear
nmap <Leader>mx <Plug>BookmarkClearAll
nmap <Leader>mkk <Plug>BookmarkMoveUp
nmap <Leader>mjj <Plug>BookmarkMoveDown
nmap <Leader>mg <Plug>BookmarkMoveToLine
" ====================== wildfire.vim =======================
let g:wildfire_objects = ["i'", 'i"', "i)", "i]", "i}"]
" ====================== vimspector =======================
nmap <Leader>vt <Plug>VimspectorToggleBreakpoint	

nmap <Leader>vc <Plug>VimspectorContinue

nmap <Leader>vst <Plug>VimspectorStop
nmap <Leader>vsc <Plug>VimspectorStepOver
nmap <Leader>vsi <Plug>VimspectorStepInto
nmap <Leader>vso <Plug>VimspectorStepOut

nmap <Leader>vb <Plug>VimspectorBalloonEval
xmap <Leader>vb <Plug>VimspectorBalloonEval

nmap <Leader>vwr :VimspectorReset<CR>
nmap <Leader>vwb <Plug>VimspectorBreakpoints
nmap <Leader>vwo :VimspectorShowOutput<CR>
" nmap <leader>vwe :VimspectorEval<CR>
" nmap <leader>vww :VimspectorWatch<CR>

" ====================== nvim config =======================
let g:python3_host_prog = '/home/jacky/.asdf/shims/python'
" let g:coc_node_path = '/usr/bin/node'
